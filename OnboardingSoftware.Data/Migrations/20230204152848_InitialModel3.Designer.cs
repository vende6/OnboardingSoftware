// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnboardingSoftware.Data;

namespace OnboardingSoftware.Data.Migrations
{
    [DbContext(typeof(OnboardingSoftwareDbContext))]
    [Migration("20230204152848_InitialModel3")]
    partial class InitialModel3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Aplikant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industrija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("JeVerifikovan")
                        .HasColumnType("bit");

                    b.Property<string>("LokacijaZaposlenja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lozinka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MjestoRodjenja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StatusZaposlenja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrenutnaPozicija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Aplikanti");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantInteres", b =>
                {
                    b.Property<int>("AplikantID")
                        .HasColumnType("int");

                    b.Property<int>("InteresID")
                        .HasColumnType("int");

                    b.HasKey("AplikantID", "InteresID");

                    b.HasIndex("InteresID");

                    b.ToTable("AplikantInteres");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantIskustvo", b =>
                {
                    b.Property<int>("AplikantID")
                        .HasColumnType("int");

                    b.Property<int>("IskustvoID")
                        .HasColumnType("int");

                    b.HasKey("AplikantID", "IskustvoID");

                    b.HasIndex("IskustvoID");

                    b.ToTable("AplikantIskustvo");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantObrazovanje", b =>
                {
                    b.Property<int>("AplikantID")
                        .HasColumnType("int");

                    b.Property<int>("ObrazovanjeID")
                        .HasColumnType("int");

                    b.HasKey("AplikantID", "ObrazovanjeID");

                    b.HasIndex("ObrazovanjeID");

                    b.ToTable("AplikantObrazovanje");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantPosao", b =>
                {
                    b.Property<int>("AplikantID")
                        .HasColumnType("int");

                    b.Property<int>("PosaoID")
                        .HasColumnType("int");

                    b.Property<string>("PopratnoPismo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AplikantID", "PosaoID");

                    b.HasIndex("PosaoID");

                    b.ToTable("AplikantPosao");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantTest", b =>
                {
                    b.Property<int>("AplikantID")
                        .HasColumnType("int");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.Property<string>("OsvojeniProcenat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AplikantID", "TestID");

                    b.HasIndex("TestID");

                    b.ToTable("AplikantTest");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantVjestina", b =>
                {
                    b.Property<int>("AplikantID")
                        .HasColumnType("int");

                    b.Property<int>("VjestinaID")
                        .HasColumnType("int");

                    b.HasKey("AplikantID", "VjestinaID");

                    b.HasIndex("VjestinaID");

                    b.ToTable("AplikantVjestina");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Auth.MyMusic.Core.Models.Auth.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Auth.MyMusic.Core.Models.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Interes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Interesi");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Iskustvo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumPocetka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Dokument")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("JeTrenutnoZaposlen")
                        .HasColumnType("bit");

                    b.Property<string>("LokacijaPozicije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivKompanije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisPozicije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RadnaPozicija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipUgovora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Iskustvo");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Lokacija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sektor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Lokacija");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Obrazovanje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fakultet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lokacija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Smjer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Obrazovanje");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Odgovor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PitanjeID")
                        .HasColumnType("int");

                    b.Property<string>("PonudjeniOdgovor_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PonudjeniOdgovor_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PonudjeniOdgovor_3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PonudjeniOdgovor_4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TacanOdgovor_1")
                        .HasColumnType("bit");

                    b.Property<bool>("TacanOdgovor_2")
                        .HasColumnType("bit");

                    b.Property<bool>("TacanOdgovor_3")
                        .HasColumnType("bit");

                    b.Property<bool>("TacanOdgovor_4")
                        .HasColumnType("bit");

                    b.Property<string>("TekstOdgovor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PitanjeID");

                    b.ToTable("Odgovori");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Pitanje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RedniBroj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("TestID");

                    b.ToTable("Pitanja");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Posao", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kategorija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LokacijaID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestID")
                        .HasColumnType("int");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LokacijaID");

                    b.HasIndex("TestID");

                    b.ToTable("Poslovi");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Test", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojPitanja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Kraj")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OsvojeniProcenat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Pocetak")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trajanje")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Testovi");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Vjestina", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Vjestine");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Auth.MyMusic.Core.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Auth.MyMusic.Core.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Auth.MyMusic.Core.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Auth.MyMusic.Core.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnboardingSoftware.Core.Models.Auth.MyMusic.Core.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Auth.MyMusic.Core.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantInteres", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Aplikant", "Aplikant")
                        .WithMany("AplikantInteres")
                        .HasForeignKey("AplikantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnboardingSoftware.Core.Models.Interes", "Interes")
                        .WithMany("AplikantInteres")
                        .HasForeignKey("InteresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplikant");

                    b.Navigation("Interes");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantIskustvo", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Aplikant", "Aplikant")
                        .WithMany("AplikantIskustvo")
                        .HasForeignKey("AplikantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnboardingSoftware.Core.Models.Iskustvo", "Iskustvo")
                        .WithMany("AplikantIskustvo")
                        .HasForeignKey("IskustvoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplikant");

                    b.Navigation("Iskustvo");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantObrazovanje", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Aplikant", "Aplikant")
                        .WithMany("AplikantObrazovanje")
                        .HasForeignKey("AplikantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnboardingSoftware.Core.Models.Obrazovanje", "Obrazovanje")
                        .WithMany("AplikantObrazovanje")
                        .HasForeignKey("ObrazovanjeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplikant");

                    b.Navigation("Obrazovanje");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantPosao", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Aplikant", "Aplikant")
                        .WithMany("AplikantPosao")
                        .HasForeignKey("AplikantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnboardingSoftware.Core.Models.Posao", "Posao")
                        .WithMany("AplikantPosao")
                        .HasForeignKey("PosaoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplikant");

                    b.Navigation("Posao");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantTest", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Aplikant", "Aplikant")
                        .WithMany("AplikantTest")
                        .HasForeignKey("AplikantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnboardingSoftware.Core.Models.Test", "Test")
                        .WithMany("AplikantTest")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplikant");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.AplikantVjestina", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Aplikant", "Aplikant")
                        .WithMany("AplikantVjestina")
                        .HasForeignKey("AplikantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnboardingSoftware.Core.Models.Vjestina", "Vjestina")
                        .WithMany("AplikantVjestina")
                        .HasForeignKey("VjestinaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplikant");

                    b.Navigation("Vjestina");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Odgovor", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Pitanje", "Pitanje")
                        .WithMany()
                        .HasForeignKey("PitanjeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pitanje");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Pitanje", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Posao", b =>
                {
                    b.HasOne("OnboardingSoftware.Core.Models.Lokacija", "Lokacija")
                        .WithMany()
                        .HasForeignKey("LokacijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnboardingSoftware.Core.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestID");

                    b.Navigation("Lokacija");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Aplikant", b =>
                {
                    b.Navigation("AplikantInteres");

                    b.Navigation("AplikantIskustvo");

                    b.Navigation("AplikantObrazovanje");

                    b.Navigation("AplikantPosao");

                    b.Navigation("AplikantTest");

                    b.Navigation("AplikantVjestina");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Interes", b =>
                {
                    b.Navigation("AplikantInteres");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Iskustvo", b =>
                {
                    b.Navigation("AplikantIskustvo");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Obrazovanje", b =>
                {
                    b.Navigation("AplikantObrazovanje");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Posao", b =>
                {
                    b.Navigation("AplikantPosao");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Test", b =>
                {
                    b.Navigation("AplikantTest");
                });

            modelBuilder.Entity("OnboardingSoftware.Core.Models.Vjestina", b =>
                {
                    b.Navigation("AplikantVjestina");
                });
#pragma warning restore 612, 618
        }
    }
}
